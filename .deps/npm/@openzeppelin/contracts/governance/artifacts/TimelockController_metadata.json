{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "minDelay",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "proposers",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "executors",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "delay",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minDelay",
						"type": "uint256"
					}
				],
				"name": "TimelockInsufficientDelay",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "targets",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "payloads",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "values",
						"type": "uint256"
					}
				],
				"name": "TimelockInvalidOperationLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "TimelockUnauthorizedCaller",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "predecessorId",
						"type": "bytes32"
					}
				],
				"name": "TimelockUnexecutedPredecessor",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "operationId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "expectedStates",
						"type": "bytes32"
					}
				],
				"name": "TimelockUnexpectedOperationState",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "CallExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "CallSalt",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "delay",
						"type": "uint256"
					}
				],
				"name": "CallScheduled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "Cancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDuration",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDuration",
						"type": "uint256"
					}
				],
				"name": "MinDelayChange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "CANCELLER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "EXECUTOR_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PROPOSER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "cancel",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "execute",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "payloads",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "executeBatch",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMinDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "getOperationState",
				"outputs": [
					{
						"internalType": "enum TimelockController.OperationState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "getTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "hashOperation",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "payloads",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "hashOperationBatch",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "isOperation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "isOperationDone",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "isOperationPending",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "isOperationReady",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "delay",
						"type": "uint256"
					}
				],
				"name": "schedule",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "payloads",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "predecessor",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "delay",
						"type": "uint256"
					}
				],
				"name": "scheduleBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newDelay",
						"type": "uint256"
					}
				],
				"name": "updateDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Contract module which acts as a timelocked controller. When set as the owner of an `Ownable` smart contract, it enforces a timelock on all `onlyOwner` maintenance operations. This gives time for users of the controlled contract to exit before a potentially dangerous maintenance operation is applied. By default, this contract is self administered, meaning administration tasks have to go through the timelock process. The proposer (resp executor) role is in charge of proposing (resp executing) operations. A common use case is to position this {TimelockController} as the owner of a smart contract, with a multisig or a DAO as the sole proposer.",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				],
				"FailedCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"TimelockInsufficientDelay(uint256,uint256)": [
					{
						"details": "The schedule operation doesn't meet the minimum delay."
					}
				],
				"TimelockInvalidOperationLength(uint256,uint256,uint256)": [
					{
						"details": "Mismatch between the parameters length for an operation call."
					}
				],
				"TimelockUnauthorizedCaller(address)": [
					{
						"details": "The caller account is not authorized."
					}
				],
				"TimelockUnexecutedPredecessor(bytes32)": [
					{
						"details": "The predecessor to an operation not yet done."
					}
				],
				"TimelockUnexpectedOperationState(bytes32,bytes32)": [
					{
						"details": "The current state of an operation is not as required. The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position counting from right to left. See {_encodeStateBitmap}."
					}
				]
			},
			"events": {
				"CallExecuted(bytes32,uint256,address,uint256,bytes)": {
					"details": "Emitted when a call is performed as part of operation `id`."
				},
				"CallSalt(bytes32,bytes32)": {
					"details": "Emitted when new proposal is scheduled with non-zero salt."
				},
				"CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)": {
					"details": "Emitted when a call is scheduled as part of operation `id`."
				},
				"Cancelled(bytes32)": {
					"details": "Emitted when operation `id` is cancelled."
				},
				"MinDelayChange(uint256,uint256)": {
					"details": "Emitted when the minimum delay for future operations is modified."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				}
			},
			"kind": "dev",
			"methods": {
				"cancel(bytes32)": {
					"details": "Cancel an operation. Requirements: - the caller must have the 'canceller' role."
				},
				"constructor": {
					"details": "Initializes the contract with the following parameters: - `minDelay`: initial minimum delay in seconds for operations - `proposers`: accounts to be granted proposer and canceller roles - `executors`: accounts to be granted executor role - `admin`: optional account to be granted admin role; disable with zero address IMPORTANT: The optional admin can aid with initial configuration of roles after deployment without being subject to delay, but this role should be subsequently renounced in favor of administration through timelocked proposals. Previous versions of this contract would assign this admin to the deployer automatically and should be renounced as well."
				},
				"execute(address,uint256,bytes,bytes32,bytes32)": {
					"details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."
				},
				"executeBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
					"details": "Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role."
				},
				"getMinDelay()": {
					"details": "Returns the minimum delay in seconds for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."
				},
				"getOperationState(bytes32)": {
					"details": "Returns operation state."
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getTimestamp(bytes32)": {
					"details": "Returns the timestamp at which an operation becomes ready (0 for unset operations, 1 for done operations)."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"hashOperation(address,uint256,bytes,bytes32,bytes32)": {
					"details": "Returns the identifier of an operation containing a single transaction."
				},
				"hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
					"details": "Returns the identifier of an operation containing a batch of transactions."
				},
				"isOperation(bytes32)": {
					"details": "Returns whether an id corresponds to a registered operation. This includes both Waiting, Ready, and Done operations."
				},
				"isOperationDone(bytes32)": {
					"details": "Returns whether an operation is done or not."
				},
				"isOperationPending(bytes32)": {
					"details": "Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\"."
				},
				"isOperationReady(bytes32)": {
					"details": "Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\"."
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"schedule(address,uint256,bytes,bytes32,bytes32,uint256)": {
					"details": "Schedule an operation containing a single transaction. Emits {CallSalt} if salt is nonzero, and {CallScheduled}. Requirements: - the caller must have the 'proposer' role."
				},
				"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)": {
					"details": "Schedule an operation containing a batch of transactions. Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"updateDelay(uint256)": {
					"details": "Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@openzeppelin/contracts/governance/TimelockController.sol": "TimelockController"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458",
			"license": "MIT",
			"urls": [
				"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67",
				"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx"
			]
		},
		".deps/npm/@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
			"license": "MIT",
			"urls": [
				"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
				"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
			]
		},
		".deps/npm/@openzeppelin/contracts/governance/TimelockController.sol": {
			"keccak256": "0x42ce53c97c0d57628662c1a6e277a6eee113aeedd0cae61805e0513ac2866daf",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fff5babafc1100625c7f60ee3694fe98b73446992211a30dbfbc2b98cced16",
				"dweb:/ipfs/QmRU8ThthE6USLbEgLNf6jVKp36qJNAkzDZ5RBoYSN7bLC"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xfb47ad79f823ee15613bbde89a20f774e1c5930e34bb2d65bbcedd1de3930c7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5cd18f8875ca09064950a6db9d167fec7aa148e0d3df7bff32d396e63f9aa5e",
				"dweb:/ipfs/QmVQPBdNyHsjEUCNj6daYBCYEYLAakkcm7sCdDWtHGEXAP"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
			"keccak256": "0x0c422bc7a7de86affa29b5dec51cdbd613c8484f3558638e2ec712efbe70fdd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://01d682c583c9711ce856842af51eb9d8e99ca516cdc1cb86e77ea0f142f40f76",
				"dweb:/ipfs/QmQRRjFf9nnP3NWzyWdRRUKwEhNG2kv7WXqeizjALQv539"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xba1957d38f832426592b901c30cb37b2cfdcccc346f3f5ed8cdcffc18e54616d",
			"license": "MIT",
			"urls": [
				"bzz-raw://b55e7504bc6e9dcb3d080f2bd56f36eda1f1d4047bfa25ffa40bfb2d6b73459c",
				"dweb:/ipfs/QmXSrnzdPuaxLeU2FKzDRnh94h1BYjfztFJtcQQ11oaRbF"
			]
		},
		".deps/npm/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
			"keccak256": "0x6e63dbc623871f12c08a577d441d9d1c761f5f79bdbaedb1fc6e336732bf67d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://58eafdf24b918154b7859d04dd3ec6e552d885bf2db2efbf48e71925f3f159f8",
				"dweb:/ipfs/QmZcPPrRcDAndvMGdQaQ4h249s6iba2om4xovVQ1pZuL2Y"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x002f24be2ce8bc38d70c6903619ec4754cb8996c9202b9d4317e4a46ee97ed1d",
			"license": "MIT",
			"urls": [
				"bzz-raw://880d8aef5107ae946862e1cfdb7519c28968f7b69f000d2a8330b1bb289fd55d",
				"dweb:/ipfs/Qmf3SYCK5ckzHuEb6UJTH8c3K9CiJMn2aXBGzXzZ58iCdh"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/Errors.sol": {
			"keccak256": "0x5122b5c446f0fbf18d05f2d11e5effb05beebcccdbd249d6bf18b1f789513885",
			"license": "MIT",
			"urls": [
				"bzz-raw://589d8a62b7044e48150c6886875cd9d992453f258ad6100b7ab1de29e0c2aee9",
				"dweb:/ipfs/QmXedtDx5MqgkFvaNVKMXswn9u5LiFkL6wuZy3nePHi54B"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x71beae49be83dc105588f02c91d76d7d0fefd35309f159cfb689d74fd1b0067b",
			"license": "MIT",
			"urls": [
				"bzz-raw://168091fed358e337bd019e453b2c59f1c32149af5a4bd082ff6680bacd25a77e",
				"dweb:/ipfs/QmW1eg1wD17DtUVm9bHtdJp3QBRNY34NcHcm2Ma56QXo33"
			]
		},
		".deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xf36b25f55e9449d309e8afc48cee1260310cc942d314835e67567709e5a51da0",
			"license": "MIT",
			"urls": [
				"bzz-raw://fba0a47fda646eddd53e2925aa99915375540eeb021f165862b79af34f592887",
				"dweb:/ipfs/QmbLCtfPhSakU28vvuqVS9cg5d13YiGgqMD3mzVWULgmN3"
			]
		}
	},
	"version": 1
}