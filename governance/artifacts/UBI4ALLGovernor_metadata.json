{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IVotes",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "contract TimelockController",
						"name": "_timelock",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "CheckpointUnorderedInsertion",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "voter",
						"type": "address"
					}
				],
				"name": "GovernorAlreadyCastVote",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "GovernorAlreadyQueuedProposal",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "GovernorDisabledDeposit",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "proposer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "votes",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "threshold",
						"type": "uint256"
					}
				],
				"name": "GovernorInsufficientProposerVotes",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "targets",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "calldatas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "values",
						"type": "uint256"
					}
				],
				"name": "GovernorInvalidProposalLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "quorumNumerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "quorumDenominator",
						"type": "uint256"
					}
				],
				"name": "GovernorInvalidQuorumFraction",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "voter",
						"type": "address"
					}
				],
				"name": "GovernorInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "GovernorInvalidVoteParams",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "GovernorInvalidVoteType",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "votingPeriod",
						"type": "uint256"
					}
				],
				"name": "GovernorInvalidVotingPeriod",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "GovernorNonexistentProposal",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "GovernorNotQueuedProposal",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "GovernorOnlyExecutor",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "GovernorQueueNotImplemented",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "proposer",
						"type": "address"
					}
				],
				"name": "GovernorRestrictedProposer",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "GovernorUnableToCancel",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "enum IGovernor.ProposalState",
						"name": "current",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "expectedStates",
						"type": "bytes32"
					}
				],
				"name": "GovernorUnexpectedProposalState",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "currentNonce",
						"type": "uint256"
					}
				],
				"name": "InvalidAccountNonce",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidShortString",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "bits",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SafeCastOverflowedUintDowncast",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "str",
						"type": "string"
					}
				],
				"name": "StringTooLong",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EIP712DomainChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ProposalCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "proposer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "string[]",
						"name": "signatures",
						"type": "string[]"
					},
					{
						"indexed": false,
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "voteStart",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "voteEnd",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "ProposalCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ProposalExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "etaSeconds",
						"type": "uint256"
					}
				],
				"name": "ProposalQueued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldProposalThreshold",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newProposalThreshold",
						"type": "uint256"
					}
				],
				"name": "ProposalThresholdSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldQuorumNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newQuorumNumerator",
						"type": "uint256"
					}
				],
				"name": "QuorumNumeratorUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldTimelock",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newTimelock",
						"type": "address"
					}
				],
				"name": "TimelockChange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "VoteCast",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "VoteCastWithParams",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					}
				],
				"name": "VoteCounted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldVotingDelay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newVotingDelay",
						"type": "uint256"
					}
				],
				"name": "VotingDelaySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldVotingPeriod",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newVotingPeriod",
						"type": "uint256"
					}
				],
				"name": "VotingPeriodSet",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "BALLOT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "CLOCK_MODE",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "COUNTING_MODE",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "EXTENDED_BALLOT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "cancel",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					}
				],
				"name": "castVote",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "castVoteBySig",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					}
				],
				"name": "castVoteWithQuadratic",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "castVoteWithReason",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "castVoteWithReasonAndParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "castVoteWithReasonAndParamsBySig",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "clock",
				"outputs": [
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eip712Domain",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "fields",
						"type": "bytes1"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "verifyingContract",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[]",
						"name": "extensions",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "execute",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "getProposalId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "timepoint",
						"type": "uint256"
					}
				],
				"name": "getVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "timepoint",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "getVotesWithParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasVoted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "hashProposal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalDeadline",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalEta",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalNeedsQueuing",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalProposer",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalSnapshot",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposalThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "propose",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "queue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					}
				],
				"name": "quorum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "quorumDenominator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "timepoint",
						"type": "uint256"
					}
				],
				"name": "quorumNumerator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "quorumNumerator",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "relay",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newProposalThreshold",
						"type": "uint256"
					}
				],
				"name": "setProposalThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint48",
						"name": "newVotingDelay",
						"type": "uint48"
					}
				],
				"name": "setVotingDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "newVotingPeriod",
						"type": "uint32"
					}
				],
				"name": "setVotingPeriod",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "state",
				"outputs": [
					{
						"internalType": "enum IGovernor.ProposalState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timelock",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC5805",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newQuorumNumerator",
						"type": "uint256"
					}
				],
				"name": "updateQuorumNumerator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract TimelockController",
						"name": "newTimelock",
						"type": "address"
					}
				],
				"name": "updateTimelock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"CheckpointUnorderedInsertion()": [
					{
						"details": "A value was attempted to be inserted on a past checkpoint."
					}
				],
				"FailedCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"GovernorAlreadyCastVote(address)": [
					{
						"details": "The vote was already cast."
					}
				],
				"GovernorAlreadyQueuedProposal(uint256)": [
					{
						"details": "The proposal has already been queued."
					}
				],
				"GovernorDisabledDeposit()": [
					{
						"details": "Token deposits are disabled in this contract."
					}
				],
				"GovernorInsufficientProposerVotes(address,uint256,uint256)": [
					{
						"details": "The `proposer` does not have the required votes to create a proposal."
					}
				],
				"GovernorInvalidProposalLength(uint256,uint256,uint256)": [
					{
						"details": "Empty proposal or a mismatch between the parameters length for a proposal call."
					}
				],
				"GovernorInvalidQuorumFraction(uint256,uint256)": [
					{
						"details": "The quorum set is not a valid fraction."
					}
				],
				"GovernorInvalidSignature(address)": [
					{
						"details": "The provided signature is not valid for the expected `voter`. If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}."
					}
				],
				"GovernorInvalidVoteParams()": [
					{
						"details": "The provided params buffer is not supported by the counting module."
					}
				],
				"GovernorInvalidVoteType()": [
					{
						"details": "The vote type used is not valid for the corresponding counting module."
					}
				],
				"GovernorInvalidVotingPeriod(uint256)": [
					{
						"details": "The voting period set is not a valid period."
					}
				],
				"GovernorNonexistentProposal(uint256)": [
					{
						"details": "The `proposalId` doesn't exist."
					}
				],
				"GovernorNotQueuedProposal(uint256)": [
					{
						"details": "The proposal hasn't been queued yet."
					}
				],
				"GovernorOnlyExecutor(address)": [
					{
						"details": "The `account` is not the governance executor."
					}
				],
				"GovernorQueueNotImplemented()": [
					{
						"details": "Queue operation is not implemented for this governor. Execute should be called directly."
					}
				],
				"GovernorRestrictedProposer(address)": [
					{
						"details": "The `proposer` is not allowed to create a proposal."
					}
				],
				"GovernorUnableToCancel(uint256,address)": [
					{
						"details": "The given `account` is unable to cancel the proposal with given `proposalId`."
					}
				],
				"GovernorUnexpectedProposalState(uint256,uint8,bytes32)": [
					{
						"details": "The current state of a proposal is not the required for performing an operation. The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position counting from right to left. NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist). This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated). See {Governor-_encodeStateBitmap}."
					}
				],
				"InvalidAccountNonce(address,uint256)": [
					{
						"details": "The nonce used for an `account` is not the expected current nonce."
					}
				],
				"SafeCastOverflowedUintDowncast(uint8,uint256)": [
					{
						"details": "Value doesn't fit in an uint of `bits` size."
					}
				]
			},
			"events": {
				"EIP712DomainChanged()": {
					"details": "MAY be emitted to signal that the domain could have changed."
				},
				"ProposalCanceled(uint256)": {
					"details": "Emitted when a proposal is canceled."
				},
				"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
					"details": "Emitted when a proposal is created."
				},
				"ProposalExecuted(uint256)": {
					"details": "Emitted when a proposal is executed."
				},
				"ProposalQueued(uint256,uint256)": {
					"details": "Emitted when a proposal is queued."
				},
				"TimelockChange(address,address)": {
					"details": "Emitted when the timelock controller used for proposal execution is modified."
				},
				"VoteCast(address,uint256,uint8,uint256,string)": {
					"details": "Emitted when a vote is cast without params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used."
				},
				"VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)": {
					"details": "Emitted when a vote is cast with params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used. `params` are additional encoded parameters. Their interpretation  also depends on the voting module used."
				},
				"VoteCounted(uint256,address,uint8,uint256)": {
					"details": "Evento emesso quando un voto viene registrato"
				}
			},
			"kind": "dev",
			"methods": {
				"CLOCK_MODE()": {
					"details": "Machine-readable description of the clock as specified in ERC-6372."
				},
				"COUNTING_MODE()": {
					"returns": {
						"_0": "Stringa che descrive la modalità (bravo, quorum=for)"
					}
				},
				"cancel(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-cancel}."
				},
				"castVote(uint256,uint8)": {
					"details": "See {IGovernor-castVote}."
				},
				"castVoteBySig(uint256,uint8,address,bytes)": {
					"details": "See {IGovernor-castVoteBySig}."
				},
				"castVoteWithQuadratic(uint256,uint8)": {
					"params": {
						"proposalId": "ID della proposta",
						"support": "Tipo di voto (0=Against, 1=For, 2=Abstain)"
					},
					"returns": {
						"_0": "Peso del voto registrato"
					}
				},
				"castVoteWithReason(uint256,uint8,string)": {
					"details": "See {IGovernor-castVoteWithReason}."
				},
				"castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
					"details": "See {IGovernor-castVoteWithReasonAndParams}."
				},
				"castVoteWithReasonAndParamsBySig(uint256,uint8,address,string,bytes,bytes)": {
					"details": "See {IGovernor-castVoteWithReasonAndParamsBySig}."
				},
				"clock()": {
					"details": "Clock (as specified in ERC-6372) is set to match the token's clock. Fallback to block numbers if the token does not implement ERC-6372."
				},
				"constructor": {
					"params": {
						"_timelock": "Contratto TimelockController",
						"_token": "Contratto del token di voto (UBI4ALLToken)"
					}
				},
				"eip712Domain()": {
					"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
				},
				"execute(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-execute}."
				},
				"getProposalId(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-getProposalId}."
				},
				"getVotes(address,uint256)": {
					"details": "See {IGovernor-getVotes}."
				},
				"getVotesWithParams(address,uint256,bytes)": {
					"details": "See {IGovernor-getVotesWithParams}."
				},
				"hasVoted(uint256,address)": {
					"params": {
						"account": "Indirizzo dell'account",
						"proposalId": "ID della proposta"
					},
					"returns": {
						"_0": "True se l'account ha votato"
					}
				},
				"hashProposal(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
				},
				"name()": {
					"details": "See {IGovernor-name}."
				},
				"nonces(address)": {
					"details": "Returns the next unused nonce for an address."
				},
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"details": "See {IERC1155Receiver-onERC1155BatchReceived}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock)."
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"details": "See {IERC1155Receiver-onERC1155Received}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock)."
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "See {IERC721Receiver-onERC721Received}. Receiving tokens is disabled if the governance executor is other than the governor itself (eg. when using with a timelock)."
				},
				"proposalDeadline(uint256)": {
					"details": "See {IGovernor-proposalDeadline}."
				},
				"proposalEta(uint256)": {
					"details": "See {IGovernor-proposalEta}."
				},
				"proposalNeedsQueuing(uint256)": {
					"params": {
						"proposalId": "ID della proposta"
					},
					"returns": {
						"_0": "True se l'accodamento è necessario"
					}
				},
				"proposalProposer(uint256)": {
					"details": "See {IGovernor-proposalProposer}."
				},
				"proposalSnapshot(uint256)": {
					"details": "See {IGovernor-proposalSnapshot}."
				},
				"proposalThreshold()": {
					"returns": {
						"_0": "Numero minimo di token necessari"
					}
				},
				"propose(address[],uint256[],bytes[],string)": {
					"params": {
						"calldatas": "Dati delle chiamate",
						"description": "Descrizione della proposta",
						"targets": "Contratti da chiamare",
						"values": "Valori ETH da inviare"
					},
					"returns": {
						"_0": "ID della proposta creata"
					}
				},
				"queue(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-queue}."
				},
				"quorum(uint256)": {
					"params": {
						"blockNumber": "Blocco di riferimento"
					},
					"returns": {
						"_0": "Numero minimo di voti necessari"
					}
				},
				"quorumDenominator()": {
					"details": "Returns the quorum denominator. Defaults to 100, but may be overridden."
				},
				"quorumNumerator()": {
					"details": "Returns the current quorum numerator. See {quorumDenominator}."
				},
				"quorumNumerator(uint256)": {
					"details": "Returns the quorum numerator at a specific timepoint. See {quorumDenominator}."
				},
				"relay(address,uint256,bytes)": {
					"details": "Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant."
				},
				"setProposalThreshold(uint256)": {
					"details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."
				},
				"setVotingDelay(uint48)": {
					"details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."
				},
				"setVotingPeriod(uint32)": {
					"details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."
				},
				"state(uint256)": {
					"params": {
						"proposalId": "ID della proposta"
					},
					"returns": {
						"_0": "Stato corrente (Pending, Active, etc.)"
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"interfaceId": "ID dell'interfaccia"
					},
					"returns": {
						"_0": "True se l'interfaccia è supportata"
					}
				},
				"timelock()": {
					"details": "Public accessor to check the address of the timelock"
				},
				"token()": {
					"details": "The token that voting power is sourced from."
				},
				"updateQuorumNumerator(uint256)": {
					"details": "Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator."
				},
				"updateTimelock(address)": {
					"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals."
				},
				"version()": {
					"details": "See {IGovernor-version}."
				},
				"votingDelay()": {
					"returns": {
						"_0": "Numero di blocchi prima dell'inizio del voto"
					}
				},
				"votingPeriod()": {
					"returns": {
						"_0": "Durata del periodo di voto in blocchi"
					}
				}
			},
			"stateVariables": {
				"_proposalVotes": {
					"details": "Mappatura dei voti per proposta e tipo di supporto (0=Against, 1=For, 2=Abstain)"
				}
			},
			"title": "UBI4ALLGovernor - Contratto di governance per UBI4ALL",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"COUNTING_MODE()": {
					"notice": "Modalità di conteggio dei voti"
				},
				"castVoteWithQuadratic(uint256,uint8)": {
					"notice": "Vota con peso quadratico"
				},
				"constructor": {
					"notice": "Costruttore del contratto"
				},
				"hasVoted(uint256,address)": {
					"notice": "Verifica se un account ha già votato"
				},
				"proposalNeedsQueuing(uint256)": {
					"notice": "Verifica se una proposta richiede accodamento"
				},
				"proposalThreshold()": {
					"notice": "Soglia per creare una proposta"
				},
				"propose(address[],uint256[],bytes[],string)": {
					"notice": "Crea una nuova proposta"
				},
				"quorum(uint256)": {
					"notice": "Quorum necessario per una proposta"
				},
				"state(uint256)": {
					"notice": "Stato di una proposta"
				},
				"supportsInterface(bytes4)": {
					"notice": "Verifica il supporto per un'interfaccia"
				},
				"votingDelay()": {
					"notice": "Ritardo di voto"
				},
				"votingPeriod()": {
					"notice": "Periodo di voto"
				}
			},
			"notice": "Gestisce proposte, voti quadratici e esecuzione tramite timelock",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"governance/UBI4ALLGovernor.sol": "UBI4ALLGovernor"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xc1bebdee8943bd5e9ef1e0f2e63296aa1dd4171a66b9e74d0286220e891e1458",
			"license": "MIT",
			"urls": [
				"bzz-raw://928cf2f0042c606f3dcb21bd8a272573f462a215cd65285d2d6b407f31e9bd67",
				"dweb:/ipfs/QmWGxjckno6sfjHPX5naPnsfsyisgy4PJDf46eLw9umfpx"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x4d9a2b261b56a1e4a37bb038151dec98b952fed16de2bdfdda27e38e2b12b530",
			"license": "MIT",
			"urls": [
				"bzz-raw://f724110f7aeb6151af800ab8c12e6060b29bda9e013f0ccb331eb754d6a7cbf0",
				"dweb:/ipfs/QmUcjzCZpxtUPdEThtAzE1f9LvuJiUGZxTdH9N6bHrb5Cf"
			]
		},
		"@openzeppelin/contracts/governance/Governor.sol": {
			"keccak256": "0x2dcd108a0d2f822523460cb704ad11bda9d916d493475d92b9e2b46e55015329",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c01464f71e183c0712a7a47dd516a6a99423b16553622d473813af4c345cf23",
				"dweb:/ipfs/QmSbXJ2DAE5iWEYFD7uYNJejrggrKpS8G3ryV3XryfyVna"
			]
		},
		"@openzeppelin/contracts/governance/IGovernor.sol": {
			"keccak256": "0xeb587bd3f646da7897e80f4ea71dc5ee324e985ca2d17136021aa2443f41a73f",
			"license": "MIT",
			"urls": [
				"bzz-raw://230f29f8a38f45150616864c0988e0ef3c269e651eefeb0ad3778e3ae387b0fd",
				"dweb:/ipfs/QmTgFRV3XAPDjXA6Gp2ug1ifwyiZGUeFDYivHJ61eJg73g"
			]
		},
		"@openzeppelin/contracts/governance/TimelockController.sol": {
			"keccak256": "0x42ce53c97c0d57628662c1a6e277a6eee113aeedd0cae61805e0513ac2866daf",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fff5babafc1100625c7f60ee3694fe98b73446992211a30dbfbc2b98cced16",
				"dweb:/ipfs/QmRU8ThthE6USLbEgLNf6jVKp36qJNAkzDZ5RBoYSN7bLC"
			]
		},
		"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol": {
			"keccak256": "0xeca42a2e3e30dda6ea1551ea2d8f52a45bf83c73554ab289c1ed8e23a29cccd2",
			"license": "MIT",
			"urls": [
				"bzz-raw://f30c79bf18905781965242b9cd89a704ff88d5ef1d5b318efd78665fb869a25a",
				"dweb:/ipfs/QmR6zWuJs2KXLkKvHVFB5aYEB4cdRbfzjGE9mwoLsxSErM"
			]
		},
		"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": {
			"keccak256": "0x93ba7e123543f54ceef6a934e950b7c2bb9c5b927cb2ce751e6c19c267242e71",
			"license": "MIT",
			"urls": [
				"bzz-raw://a3e2cd569961b8638a49a4e617136f70db9d1e46ed3cd7ad7a065b8203e479fb",
				"dweb:/ipfs/QmRUxPjvcj5qY5b2phDJ25PhedPSMPxZuEtYThDYDZXTjR"
			]
		},
		"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol": {
			"keccak256": "0xb0db91cf6bfba9b80eca3984a39244f375e44dec1e4835be9db909441ae2738a",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a9617c6d86439d5740aaf8786d9523f105c9ba0f543371d50df61b862b11b09",
				"dweb:/ipfs/QmRov6nzaHTDv12Hed1fBuEhU2Mp2mEjH15FV1pVVGiDQo"
			]
		},
		"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol": {
			"keccak256": "0x589cc5a03fea9eb5f27c9547ff0e07f3f1e2d5bcdcfa0a8dac1265e1aa70821c",
			"license": "MIT",
			"urls": [
				"bzz-raw://334fe93b92bb509fbcd1e283c2b8f2e6196f90577d56c95346c7ea1c94e9bf56",
				"dweb:/ipfs/Qmcj3cFGi8wXd76DV8peoPankNWGyuc2WfsAU7g7sj3uaa"
			]
		},
		"@openzeppelin/contracts/governance/utils/IVotes.sol": {
			"keccak256": "0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947",
			"license": "MIT",
			"urls": [
				"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856",
				"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x957d2f0a814f8ec8edf41f1a1f197ce8fac33a6a76d6298ad134c3a437fbca01",
			"license": "MIT",
			"urls": [
				"bzz-raw://827d5f88467316bfb60d5c24e0e7378bc433521ad8fa6bc335b93e7f21c3ae44",
				"dweb:/ipfs/QmWD6YuGoNJitoYgPEspkvVFjAYcn7bfFfCUMFPZ6qgrdo"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0x089a0d58044e866d1efa50be85ca3c8e4fe1a6706a46c2ccdce0279f6cc0dc2b",
			"license": "MIT",
			"urls": [
				"bzz-raw://f4f5a6c70a21c28745f46353ef1e5a3f1a70d8e7c3debb81e12baa987f10f503",
				"dweb:/ipfs/QmYjHjmJEdpadFycNGNtjM9YDpSb9xdbmAGgmJZ5EumP3N"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC5267.sol": {
			"keccak256": "0x8c44840ff5356a18768d5789d2536871f6c688cb6a45f44252570bd77e92ef97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9969f43f5fde47ff72218e9326facb09832667f9e2dfb22cea8dcfb0451ea2fc",
				"dweb:/ipfs/QmaXbLW3FcurC8GSyyb3fBHeQa8dNEj4VvXNQ1jjF9mrYx"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC5805.sol": {
			"keccak256": "0x3b57bfe64c8b52510944857abf00632a75022a80b135f9bd2f26a00ba74fef13",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c0f1a21a1ddeda3e2b2ec3c47b13a6bbf28d04d4291e455974efb284dd8bc81",
				"dweb:/ipfs/QmZKcEsyq38nd6X5EWaFD6rSuRu8hjpPQAJFFAWXDHpHFW"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC6372.sol": {
			"keccak256": "0xe3c4b4533cddd53fe45e9c922286632efca4b9488cb5e4d10165ba6bfa6b3e82",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3d89551f82c94ee309822ce14444408d1f9c69c5e7771fbe2932d65dcb08b3d",
				"dweb:/ipfs/QmX1PWyyMtGjY6ZSKTM6dAopX8VPPDkF7oFGE6MBhGwZy7"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xfb47ad79f823ee15613bbde89a20f774e1c5930e34bb2d65bbcedd1de3930c7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5cd18f8875ca09064950a6db9d167fec7aa148e0d3df7bff32d396e63f9aa5e",
				"dweb:/ipfs/QmVQPBdNyHsjEUCNj6daYBCYEYLAakkcm7sCdDWtHGEXAP"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
			"keccak256": "0x0c422bc7a7de86affa29b5dec51cdbd613c8484f3558638e2ec712efbe70fdd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://01d682c583c9711ce856842af51eb9d8e99ca516cdc1cb86e77ea0f142f40f76",
				"dweb:/ipfs/QmQRRjFf9nnP3NWzyWdRRUKwEhNG2kv7WXqeizjALQv539"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xba1957d38f832426592b901c30cb37b2cfdcccc346f3f5ed8cdcffc18e54616d",
			"license": "MIT",
			"urls": [
				"bzz-raw://b55e7504bc6e9dcb3d080f2bd56f36eda1f1d4047bfa25ffa40bfb2d6b73459c",
				"dweb:/ipfs/QmXSrnzdPuaxLeU2FKzDRnh94h1BYjfztFJtcQQ11oaRbF"
			]
		},
		"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
			"keccak256": "0x6e63dbc623871f12c08a577d441d9d1c761f5f79bdbaedb1fc6e336732bf67d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://58eafdf24b918154b7859d04dd3ec6e552d885bf2db2efbf48e71925f3f159f8",
				"dweb:/ipfs/QmZcPPrRcDAndvMGdQaQ4h249s6iba2om4xovVQ1pZuL2Y"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x002f24be2ce8bc38d70c6903619ec4754cb8996c9202b9d4317e4a46ee97ed1d",
			"license": "MIT",
			"urls": [
				"bzz-raw://880d8aef5107ae946862e1cfdb7519c28968f7b69f000d2a8330b1bb289fd55d",
				"dweb:/ipfs/Qmf3SYCK5ckzHuEb6UJTH8c3K9CiJMn2aXBGzXzZ58iCdh"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Errors.sol": {
			"keccak256": "0x5122b5c446f0fbf18d05f2d11e5effb05beebcccdbd249d6bf18b1f789513885",
			"license": "MIT",
			"urls": [
				"bzz-raw://589d8a62b7044e48150c6886875cd9d992453f258ad6100b7ab1de29e0c2aee9",
				"dweb:/ipfs/QmXedtDx5MqgkFvaNVKMXswn9u5LiFkL6wuZy3nePHi54B"
			]
		},
		"@openzeppelin/contracts/utils/Nonces.sol": {
			"keccak256": "0x37cd3fb7b725e88b17233f5da6aa3b8b7bd346208e8f1f3314854d83f430e4cd",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ddbb7250367b4ee8f4c037a0fd1130261de408567da5cfb298f4b46ced2bd58",
				"dweb:/ipfs/QmcNgaqDNGEgppBMw1BYzM2pWaXT2TgTJg4RUo4MEQAQQX"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xbed383595d014af07ed0330243aa0de868518711f10fce91413be0e12a9993b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://f2f98d04c8b9bf51598d55840249f3d1f71335ae9a38cb6b3616b55c85107a6e",
				"dweb:/ipfs/QmWJhMXynwiwX9kvRTt8Q5f3UBjya73m7euTLh4o7ezq7s"
			]
		},
		"@openzeppelin/contracts/utils/ShortStrings.sol": {
			"keccak256": "0x2f3cbeb1d6f37eec45300773c5b56359a0d7e05e33a316f146337aae5bd13b53",
			"license": "MIT",
			"urls": [
				"bzz-raw://efa65338dc22726f03a004509b6df55c3a7aaade9008bacd5106d6ae0bcd012d",
				"dweb:/ipfs/QmQPgCWbLvJ5YAoN9c9TBedJp2TLjMtNsSrqG3N38RPagQ"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xd1228fc9ba34d849a15a4a5c510164d6b393e8dce34e1a4a9dacac9353438b97",
			"license": "MIT",
			"urls": [
				"bzz-raw://aecd56f042927d3fdfb2a0b6ec1055578e2f3e7a421200c7da7e403e4e3b4bb0",
				"dweb:/ipfs/QmYUgVS1hDuRvs3sBEP6vxTmBWZSNsfGnj9hc9BqSDypGi"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x31c9ceb54a5efc66e7b6e080bef765b04d95902593e7e85b89a6b2c2c174aa1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://94ec1dad794f2c3435fc88d4276193d706519f57df91a6d6d2146ddd109fb2e7",
				"dweb:/ipfs/Qme9URu5i86xYrzvJV8KE5Kn1pWqEjkxnA9VhFFXwUZSJF"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x2dbe29560b6d4f93cdae642d1cec4570b8a44722a2182559e990772c72ef0d57",
			"license": "MIT",
			"urls": [
				"bzz-raw://00cf7d795a154670a9842f2a673e88e10bf379ca415fb1c990a9f1f278905c47",
				"dweb:/ipfs/QmebeGqpdm76RqP1myWbMJwRDtsKqzpau8eRgSJ9ng77c9"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
			"keccak256": "0xd0a3e257ff255a166f9300d74454ab525a92912c438c7f766870b673effd510a",
			"license": "MIT",
			"urls": [
				"bzz-raw://1283bd5b28e91f604788b7a98a20f7962f36f5f1da3b32dc8140b2cdc7f6f9de",
				"dweb:/ipfs/QmNtGvjYCE9bWQX2bqe4K3duh5gYPFx3Dq95Vj4fJw5Mth"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
			"keccak256": "0x54de4dcb4e5238418772038f957bbb5478ca37c3d16edc7ce100164a9744f754",
			"license": "MIT",
			"urls": [
				"bzz-raw://42b47357783941cdb84fa76b50ee2138728d928e20699017eeee2dfaf6964c8a",
				"dweb:/ipfs/Qmbabb8DJ6hm7YjTzG6eNsRef4eWbB8hHmdiEG1EiVfw4Z"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
			"keccak256": "0x0f1cc52ee171eac154233e212f85e9eb642a0720797e55700bc83686043ce7f7",
			"license": "MIT",
			"urls": [
				"bzz-raw://067fa823efbaac6266c8eb8f523d2ed4226199fb08ff2bbad9686b975dca4559",
				"dweb:/ipfs/QmPuFymdQRJSreMeWdP1i8ZsJk42WBd88GU6czYUR8wWwE"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x71beae49be83dc105588f02c91d76d7d0fefd35309f159cfb689d74fd1b0067b",
			"license": "MIT",
			"urls": [
				"bzz-raw://168091fed358e337bd019e453b2c59f1c32149af5a4bd082ff6680bacd25a77e",
				"dweb:/ipfs/QmW1eg1wD17DtUVm9bHtdJp3QBRNY34NcHcm2Ma56QXo33"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xf36b25f55e9449d309e8afc48cee1260310cc942d314835e67567709e5a51da0",
			"license": "MIT",
			"urls": [
				"bzz-raw://fba0a47fda646eddd53e2925aa99915375540eeb021f165862b79af34f592887",
				"dweb:/ipfs/QmbLCtfPhSakU28vvuqVS9cg5d13YiGgqMD3mzVWULgmN3"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x18eac4f4dd000e5b570dc11fb0d3cccf30ec9a673c19f96b09d417bf922c0d6e",
			"license": "MIT",
			"urls": [
				"bzz-raw://99bea806ae3e3d376f320713da78f9c116a8dc8e33133ae1b5f361bc69ff7eb1",
				"dweb:/ipfs/Qmd7poYYxdBb7Ry2yQmTqHgYGyjCcK9qwk43pcpJa7g8Lk"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x880e8b3325f624a5c4dfb9a754ed83bf0be1476d02c5063b215f3c3b9fdec331",
			"license": "MIT",
			"urls": [
				"bzz-raw://b52e14b50f3ca0b35d014b166235d94dfa8c9067bb3f5d65efdfb2193355a455",
				"dweb:/ipfs/QmNrM5LEwfCi7cxMovccBpFeL8T9MWfqA15dW9SobPDPfo"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x1c13c91b325c1c175618d13b61f5a0806c946a1a20ccec345227ceb193536d41",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb90f6b2f5b149dfc1047a713fa0d1e010df5fa5c5de50c16d080561a6dc64be",
				"dweb:/ipfs/QmWVzdQygd5ydKkix1W3UQgmKpygyyKB6KkbsMdAMYjpJc"
			]
		},
		"@openzeppelin/contracts/utils/structs/Checkpoints.sol": {
			"keccak256": "0xaf06e8a95fb11ea1b7d2b7ccfb38f13822ffaf84c892a8b7751c6c4ce198529a",
			"license": "MIT",
			"urls": [
				"bzz-raw://69d6f1e0b965e4f69d24792d6799ddacf5c3544b8bad4fc06800fe976dae9d5c",
				"dweb:/ipfs/QmRhkMj4kpBY1TAzNYkK4znxT12KEbEnd9BtGq57RJUkGk"
			]
		},
		"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol": {
			"keccak256": "0x18b257538f68904e4bb18a9e8268432eae01c9a4512546d58cf0be69d55e8d82",
			"license": "MIT",
			"urls": [
				"bzz-raw://214f048a3e247a3bcdd8a253d17ae8f8fcc7b547bec63a02974b743d348df5ce",
				"dweb:/ipfs/QmcE4S814YSSV3ZwfBTaVzwbMUwuW1QBptenAM8Q4SYrBg"
			]
		},
		"@openzeppelin/contracts/utils/types/Time.sol": {
			"keccak256": "0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6",
				"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza"
			]
		},
		"governance/UBI4ALLGovernor.sol": {
			"keccak256": "0xfd6020e2b9f75073d83831a27f56fe70c85f747b1f9c5a3d2c22dac04bf324e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://cdc8384b05070fd3a2b0cfa025fc4889c5c5fdb7f58b59131dd68e27e2b5c7f9",
				"dweb:/ipfs/QmPHuHKJfDAGtuYmXU3iAruwn96t1rN37S5Pb4iL8ZvLYx"
			]
		}
	},
	"version": 1
}